<?php
// +----------------------------------------------------------------------
// | Description: 用户
// +----------------------------------------------------------------------
// | Author: linchuangbin <linchuangbin@honraytech.com>
// +----------------------------------------------------------------------

namespace app\common\model;


use think\Config;
use think\Db;
use think\Model;
use app\common\controller\Common;
use think\Request;
use think\Session;
use app\common\traits\Obtrait;

class User extends Model
{
    use Obtrait;

    /**
     * 初始化操作
     * @author guozhen
     */
    //TODO oldfunction
    public static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    //TODO oldfunction
        User::event("before_insert", function ($user) {
            $user->salt = chr(rand(97, 122)) . chr(rand(65, 90)) . chr(rand(97, 122)) . chr(rand(65, 90));
            $user->pwd = md5($user->pwd . $user->user_name);
        });
    //TODO oldfunction
        User::event('before_update', function ($user) {
            if (isset($user->pwd)) {
                $user->pwd = md5($user->pwd . $user->user_name);
            }
        });
    }

    /**
     * 用户验证
     * @param $username_or_user_id
     * @param $pwd_or_remember_key
     * @param string $option
     * @return array
     * @throws \app\common\exception\ProcessException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @author jingyang
     */
    //TODO oldfunction
    public function checkUserLogin($username_or_user_id, $pwd_or_remember_key, $option = 'login')
    {
        if($option=='login'){
            $user_info = self::where(["user_name" => $username_or_user_id])->find();
            if (empty($user_info)) {
                Common::processException('用户名错误');
            }
            $user_info_arr = $user_info->toArray();
            if (md5($pwd_or_remember_key . $username_or_user_id) != $user_info_arr["pwd"]) {
                Common::processException('用户名或密码错误1');
            }
        }elseif($option=='auto'){
            $user_info = self::where(["id" => $username_or_user_id])->find();
            if (empty($user_info)) {
                Common::processException('用户名错误');
            }
            $user_info_arr = $user_info->toArray();
            if (Common::getRememberStr($user_info_arr['id'],$user_info_arr['salt']) != $pwd_or_remember_key) {
                Common::processException('用户名或密码错误2');
            }
        }
        /** @var array $user_info_arr */
        if ($user_info_arr["id"] != 1) {
            // 查询node_id是否被禁用 如果被禁同样禁止登录
            $node_info = (new Node)->where(["id" => $user_info_arr["node_id"]])->find();
            if (empty($node_info)) {
                Common::processException("当前用户没有节点后台!!");
            }
            if ($node_info["status"] == "off") {
                Common::processException("当前节点后台禁止登录!!");
            }
        }
        $return_arr = [];
        /** @var array $user_info */
        $return_arr['id'] = $user_info['id'];
        $return_arr['node_id'] = $user_info['node_id'];
        $return_arr['name'] = $user_info['name'];
        $return_arr['salt'] = $user_info['salt'];
        $return_arr['type'] = $user_info['type'];
        $return_arr['type_name'] = $user_info['type_name'];
        return $return_arr;
    }


    /**
     * 修改密码
     * @param $oldPwd
     * @param $newPwd
     * @return array
     * @throws \think\exception\DbException
     * @author guozhen
     */
    //TODO oldfunction
    public function changePwd($oldPwd, $newPwd)
    {
        $common = new Common();
        $userSession = $common->getSessionUser();
        $user_id = $userSession["user_id"];
        $user_info = $this::get($user_id);
        if (empty($user_info)) {
            return ["登录超时,请重新登录", 'failed', ''];
        }
        if ($user_info->pwd != md5($oldPwd . $user_info->user_name)) {
            return ["原密码错误", 'failed', ''];
        }
        //原密码和新密码相同
        if ($oldPwd == $newPwd) {
            return ["原密码和新密码不能相同", 'failed', ''];
        }
        //新密码长度
        if (strlen($newPwd) < 6) {
            return ["新密码不能小于6位", 'failed', ''];
        }
        if (!$this->where(["id" => $user_id])->update(["pwd" => md5($newPwd . $user_info->user_name)])) {
            return ["密码修改失败", 'failed', ''];
        }
        return ["密码修改成功", '', ''];
    }

    /**
     * 获取user数据
     * @param $limit
     * @param $rows
     * @param int $where
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @author guozhen
     */

    //TODO oldfunction
    public function getUser($limit, $rows, $where = 1)
    {
        $count = $this->where($where)->count();
        $data = $this->limit($limit, $rows)->order("id", "desc")->field("id,user_name,type,type_name,contacts,name,tel,mobile,qq,wechat,email,create_time")->where($where)->select();
        return [
            "total" => $count,
            "rows" => $data
        ];
    }
}